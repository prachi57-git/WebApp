pipeline {
    agent any

    environment {
        // Replace with your AWS credentials stored in Jenkins credentials manager
        GIT_CREDENTIALS = credentials('github-token')
        AWS_CREDENTIALS = credentials('aws-credentials-id')
        S3_BUCKET = 'webpp-code-bucket'  // Replace with your S3 bucket name
        APP_NAME = 'WebAppDeploy'      // Replace with your CodeDeploy application name
        DEPLOYMENT_GROUP = 'WebApp-DeploymentGroup' // Replace with your CodeDeploy deployment group name
    }
    
    tools {
        maven 'Maven 3.9.9' // Use the name of the Maven installation from Global Tool Configuration
    }


    stages {
        // 1. Checkout code from Git repository
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/prachi57-git/WebApp.git', credentialsId: 'github-token' // Replace with your repository
            }
        }

        // 2. Build the application using Maven
        stage('Build') {
            steps {
                sh 'mvn clean package'  // Make sure Maven is installed on Jenkins server
            }
        }

        // 3. Upload the WAR file to S3 for CodeDeploy
        stage('Upload to S3') {
            steps {
                withAWS(credentials: AWS_CREDENTIALS) {
                    s3Upload(
                        bucket: webpp-code-bucket,
                        file: 'target/WebApp.war' // Path to the .war file generated by Maven
                    )
                }
            }
        }

        // 4. Deploy the application to EC2 using CodeDeploy
        stage('Deploy to EC2 via CodeDeploy') {
            steps {
                withAWS(credentials: AWS_CREDENTIALS) {
                    sh '''
                    aws deploy create-deployment \
                    --application-name ${WebAppDeploy} \
                    --deployment-group-name ${WebApp-DeploymentGroup}     
                    --s3-location bucket=${webpp-code-bucket},key=target/WebApp.war,bundleType=zip
                    '''
                }
            }
        }

        // 5. Scaling EC2 instances
        stage('Scale EC2') {
            steps {
                withAWS(credentials: AWS_CREDENTIALS) {
                    sh '''
                    # Scaling policies example (modify as needed):
                    aws autoscaling update-auto-scaling-group \
                    --auto-scaling-group-name my-auto-scaling-group \
                    --desired-capacity 3 \
                    --min-size 1 \
                    --max-size 5
                    '''
                }
            }
        }
    }

    post {
        // Notifications or Cleanup Actions
        always {
            echo "CI/CD Pipeline completed!"
        }
    }
}

